@page "/accouting/arreas"
@using wsmcbl.front.Controllers
@using wsmcbl.front.dto.input

@inject TariffCollectionController tariffcontroller
@inject SweetAlertService Swal

@if (tariffs == null)
{
    <div class="loader"></div>
}
else
{
    
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Aplicar Mora</h6>
            <button type="button" class="btn btn-success" 
                    @onclick="(e) => Confirm()">Cobrar
            </button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Año Lectivo</th>
                            <th>Concepto</th>
                            <th>Monto</th>
                            <th>Con Mora</th>
                            <th>Fecha Vencimiento</th>
                            <th>Seleccionar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in tariffs)
                        {
                            <tr>
                                <td>@item.TariffId</td>
                                <td>@item.SchoolYear</td>
                                <td>@item.Concept</td>
                                <td>@item.Amount</td>
                                <td>@item.IsLate</td>
                                <td>@item.DueDate</td>
                                <td>
                                    <input type="checkbox" @onchange="(e) => OnSelectItemChanged(e, item)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}





@code
{
    @* Lista o tariffa a aplicar mora *@
    public List<TariffDto> selectedTariffs = new List<TariffDto>();

    public int applyArreas;

    @* Lista de tarifas obtenido de la API *@
    List<TariffDto> tariffs = null!;


    protected override async Task OnInitializedAsync()
    {
        //Obtenemos la lista de tarifas vencidas
        tariffs = await tariffcontroller.GetTariffsOverdue("state:overdue");
    }

    private void OnSelectItemChanged(ChangeEventArgs e, TariffDto tariff)
    {
        if ((bool)e.Value)
        {
            if (!selectedTariffs.Contains(tariff))
            {
                selectedTariffs.Add(tariff);
                applyArreas = tariff.TariffId;
            }
        }
        else
        {
            if (selectedTariffs.Contains(tariff))
            {
                selectedTariffs.Remove(tariff);
            }
        }
    }

    public async Task Confirm()
    {
        try
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Seguro que desea generar mora?",
                Text = "La mora se aplicara a todos los estudiantes que no hayan pagado a tiempo",
                ShowDenyButton = true,
                ConfirmButtonText = "Aplicar",
                DenyButtonText = "No guardar"
            });

            if (result.IsConfirmed)
            {
                var response = await tariffcontroller.ActiveArrears(applyArreas);

                if (response)
                {
                    await Swal.FireAsync("Mora generada correctamente!", "", "success");
                }
                else
                {
                    await Swal.FireAsync("Obtuvimos problemas al generar la mora", "", "info");
                }
            }
            else if (result.IsDenied)
            {
                await Swal.FireAsync("No se ha generado mora", "", "info");
            }
        }
        catch(Exception ex)
        {
            await Swal.FireAsync("Error", $"Ha ocurrido un error: {ex.Message}", "error");
        }    
    }

}